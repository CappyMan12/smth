#include "BluetoothSerial.h"  // Usar comillas para la librería oficial
#include <QTRSensors.h>

#define LED 2
#define BOTON 12  

// Verificar que Bluetooth esté habilitado
#if !defined(CONFIG_BT_ENABLED) || !defined(CONFIG_BLUEDROID_ENABLED)
#error Bluetooth is not enabled! Please run `make menuconfig` to and enable it
#endif

BluetoothSerial SerialBT;
QTRSensors sigueLineas;
const uint8_t SensorCount = 8;
uint16_t sensorValues[SensorCount];  
int umbral = 2900;
int val = 1;

void setup() {
  Serial.begin(115200);
  pinMode(LED, OUTPUT);
  pinMode(BOTON, INPUT_PULLUP);  // Configurar botón con pull-up interno
  
  // Inicializar Bluetooth UNA VEZ en setup
  SerialBT.begin("El robot"); 
  Serial.println("Bluetooth iniciado - Dispositivo: El robot");
  
  // Configurar sensores QTR
  sigueLineas.setTypeAnalog();
  sigueLineas.setSensorPins((const uint8_t[]){36, 39, 34, 35, 32, 33, 25, 26}, SensorCount);
  sigueLineas.setEmitterPin(27);
  
  Serial.println("Calibrando Sensores...");
  
  digitalWrite(LED, HIGH);  // Encender LED durante calibración
  for(int i = 0; i < 200; i++){ 
    sigueLineas.calibrate();
    delay(10);
  }
  digitalWrite(LED, LOW);  // Apagar LED después de calibración
  
  Serial.println("Calibracion completada");
  Serial.println("Presione el boton para empezar");
  
  // Esperar a que se presione el botón
  while(digitalRead(BOTON) == HIGH){  // HIGH porque usamos INPUT_PULLUP
    delay(10);
  }
  
  Serial.println("Iniciando lectura de sensores...");
}

void loop() {
  // Leer sensores
  sigueLineas.read(sensorValues);
  
  // Mostrar valores en Serial Monitor
  for (uint8_t i = 0; i < SensorCount; i++) {
    Serial.print(sensorValues[i]);
    Serial.print("\t");
  }
  Serial.println();
  
  // Enviar datos por Bluetooth
  String datos = "";
  for (uint8_t i = 0; i < SensorCount; i++) {
    datos += String(sensorValues[i]);
    if (i < SensorCount - 1) datos += ",";
  }
  SerialBT.println(datos);
  
  delay(100);  // Pequeña pausa para evitar saturar la comunicación
}
